[
  { "keys": ["ctrl+alt+p"], "command": "prompt_select_workspace" },
  { "keys": ["ctrl+shift+;"], "command": "open_terminal_project_folder" },
  { "keys": ["ctrl+shift+alt+;"], "command": "open_terminal" },
  { "keys": ["ctrl+alt+l"], "command": "reveal_in_side_bar" },
  {
    "keys": ["ctrl+shift+c"],
    "command": "toggle_comment",
    "args": { "block": false }
  },
  {
    "keys": ["ctrl+shift+7"],
    "command": "toggle_comment",
    "args": { "block": true }
  },
  { "keys": ["ctrl+t"], "command": "side_bar_new_file2" },
  { "keys": ["ctrl+shift+n"], "command": "reopen_last_file" },
  {
    "keys": ["ctrl+enter"],
    "command": "run_macro_file",
    "args": { "file": "Packages/User/EOL-semicolon.sublime-macro" }
  },
  { "keys": ["ctrl+up"], "command": "scroll_lines", "args": { "amount": 1.0 } },
  {
    "keys": ["ctrl+down"],
    "command": "scroll_lines",
    "args": { "amount": -1.0 }
  },
  // Auto-pair grave accents
  {
    "keys": ["`"],
    "command": "insert_snippet",
    "args": { "contents": "${2:`${1:}`}${0}" },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^(?:\t| |\\)|]|\\}|>|$)",
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "not_regex_contains",
        "operand": "[`a-zA-Z0-9_]$",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "keys": ["`"],
    "command": "insert_snippet",
    "args": { "contents": "${2:`${1:$SELECTION}`}${0}" },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  {
    "keys": ["`"],
    "command": "move",
    "args": { "by": "characters", "forward": true },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^`",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  // Auto-pair quotes
  {
    "keys": ["\""],
    "command": "insert_snippet",
    "args": { "contents": "${2:\"${1:}\"}${0}" },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^(?:\t| |\\)|]|\\}|>|$)",
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "not_regex_contains",
        "operand": "[\"a-zA-Z0-9_]$",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.double - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "keys": ["\""],
    "command": "insert_snippet",
    "args": { "contents": "${2:\"${1:$SELECTION}\"}${0}" },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  // Auto-pair single quotes
  {
    "keys": ["'"],
    "command": "insert_snippet",
    "args": { "contents": "${2:'${1:}'}${0}" },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^(?:\t| |\\)|]|\\}|>|$)",
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "not_regex_contains",
        "operand": "['a-zA-Z0-9_]$",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "keys": ["'"],
    "command": "insert_snippet",
    "args": { "contents": "${2:'${1:$SELECTION}'}${0}" },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  }
]
